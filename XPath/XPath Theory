<!--NODES: In XPath, there are seven kinds of nodes: element, attribute, text, namespace, processing-instruction,
comment, and document nodes.

	<!--Loading an XML Document
		Using an XMLHttpRequest object to load XML docuemnts is supported in all modern browsers-->
	var xmlHttp = new XMLHttpRequest();

	<!--Selecting Nodes
		Chrome, Firefox and Safari-->
	xmlDoc.evaluate(xpath, xmlDoc, null, XPathReqult.ANY_TYPE,null);

	<!--Internet Explorer-->
	xmlDoc.selectNodes(xpath);

XML documents are treated as trees of nodes. The topmost element of the tree is called the root element.-->
<?xml version="1.0" encoding="UTF-8"?>

<bookstore>
	<book>
		<title lang="en">Harry Potter</title>
		<author>J K. Rowling</author>
		<year>2005</year>
		<price>29.99</price>
	</book>
</bookstore>

<!--Example of nodes in this XML document-->
<bookstore> <!--root element node-->
	<author>J K. Rowling</author> <!--element node-->
lang="en" <!--attribute node-->

<!--Atomic values are nodes with no children or parent.-->
J K. Rowling
"en"

<!--Node Relationships
	Parent
		Each element and attribute has one parent.
		In the following example; the book element is the parent of the title, author, year, and price:-->
<book>
  <title>Harry Potter</title>
  <author>J K. Rowling</author>
  <year>2005</year>
  <price>29.99</price>
</book>

<!--Children
	Element nodes may have zero, one or more children.
	In the following example; the title, author, year, and price elements are all children of the book element:-->
<book>
  <title>Harry Potter</title>
  <author>J K. Rowling</author>
  <year>2005</year>
  <price>29.99</price>
</book>

<!--Siblings
	Nodes that have the same parent.
	In the following example; the title, author, year, and price elements are all siblings:-->
<book>
  <title>Harry Potter</title>
  <author>J K. Rowling</author>
  <year>2005</year>
  <price>29.99</price>
</book>

<!--Ancestors
	A node's parent, parent's parent, etc.
	In the following example; the ancestors of the title element are the book element and the bookstore element:-->
<bookstore>
	<book>
  	<title>Harry Potter</title>
  	<author>J K. Rowling</author>
  	<year>2005</year>
  	<price>29.99</price>
	</book>
</bookstore>

<!--Descendants
	A node's children, children's children, etc.
	In the following example; descendants of the bookstore element are the book, title, author, year, and price elements:-->
<bookstore>
	<book>
  	<title>Harry Potter</title>
  	<author>J K. Rowling</author>
  	<year>2005</year>
  	<price>29.99</price>
	</book>
</bookstore>

<!--Selecting Nodes
	Expression = Description-->
nodename = Selects all nodes with the name "nodename"
/        = Selects from the root nodes
//       = Selects nodes in the document from the current node that match the selection no matter where they Parent
.        = Selects the current nodes..
..       = Selects the parent of the current node
@        = selects attributes

<!--Path Expressions = Results-->
bookstore       = Selects all nodes with the name "bookstore"
/bookstore      = Selects the root element "bookstore"
bookstore/book  = Selects all book elements that are children of bookstore
//book          = Selects all book elements no matter where they are in the document
bookstore//book = Selects all book elements that are descendan of the bookstore elemtn, no matter where they are under the bookstore element
//@lang         = Selects all attributes that are named "lang"

<!--Selecting Several Paths
	By using the | operator in an XPath expression you can select several paths.
	In the table below we have listed some path expressions and the result of the expressions
	Path Expressions = Results-->
//book/title | //book/price     = Selects all the title AND price elements of all book elements
//title | //price               = Selects all the title AND price elements in the document
/bookstore/book/title | //price = Selects all the title elements of the book element of the bookstore elemen AND all the price elementsin
the document

<!--Example Code-->
<?xml version="1.0" encoding="UTF-8"?>

<bookstore>
	<book>
  	<title lang="en">Harry Potter</title>
  	<price>29.99</price>
	</book>

	<book>
  	<title lang="en">Learning XML</title>
  	<price>39.95</price>
	</book>
</bookstore>

<!--XPath Axes
	An axis represents a relationship to the context (current) node, and is used to locate nodes relative to that node on the tree.
	AxisName = Result-->
ancestor           = Selects all ancestors (parent, grandparent, etc.) of the current node
ancestor-or-self   = Selects all ancestors (parent, grandparent, etc.) of the current node and the current node itself
attribute          = Selects all attributes of the current node
child              = Selects all children of the current node
descendant         = Selects all descendants Selects all descendants (children, grandchildren, etc.) of the current node
descendant-or-self = Selects all descendants (children, grandchildren, etc.) of the current node and the current node itself
following          = Selects everything in the document after the closing tag of the current node
following-sibling  = Selects all siblings after the current node
namespace          = Selects all namespace nodes of the current node
parent             = Selects the parent of the current node
preceding          = Selects all nodes that appear before the current node in the document, except ancestors, attribute nodes and namespace nodes
preceding-sibling  = Selects all siblings before the current node
self               = Selects the current node

<!--Location Path Expression
	A location path can be absolute or relative.
	An absolute location path starts with a slash ( / ) and a relative location path does not. In both cases the location path consists of one or more steps,
	each separated by a slash
An absolute location path:-->
/step/step/...

<!--A relative location path:-->
step/step/...

<!--Each step is evaluated against the nodes in the current node-set.
	A step consists of:
	- An axis (defines the tree-relationship between the selected nodes and the current node)
	- A node-test (identifies a node within an axis)
	- Zero or more predicates (to further refine the selected node-set)
	- The syntax for a location step is:-->
axisname::nodetest[predicate]

<!--Example = Result-->
child::book            = Selects all book nodes that are children of the current node
attribute::lang        = Selects the lang attribute of the current node
child::*               = Selects all element children of the current node
attribute::*           = Selects all attributes of the current node
child::test()          = Selects all text node children of the current node
child::node()          = Selects all children of the current node
descendant::book       = Selects all book descendants
ancestor::book         = Selectd all book ancestors of the current node
ancestor-or-self::book = Selects all book ancestors of the current node - and the current as well if it is a book node
child::*/child::price  = Selects all price grandchildren of the current node

<!--XPath Operators
	Operator_Description = Example-->
| + Computes two node-sets       = //book | //book
"+" Addition                     = 6 + 4
-   Subtraction                  = 6 - 4
*   Multiplication               = 6 * 4
div Division                     = 8 div 4
=   Equal                        = price=9.80
!=  Not equal                    = price!=9.80
<   Not Equal                    = price<9.80
<=  Less than or equal to        = price>=9.80
>   Greater than                 = price>9.80
>=  Greater than or equal to     = price>9.80
or  Or                           = price=9.80 or price=9.70
and And                          = price>9.00 and price=9.90
mod Modulus (division remainder) = 5 mod 2
